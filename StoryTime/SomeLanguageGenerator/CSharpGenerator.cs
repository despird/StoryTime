using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.IO;
using Microsoft.CSharp;

using SOME.SomeLanguageCore;
using SOME.SomeLanguageCore.CodeDom;
using SOME.SomeLanguageCore.Tokens;
using SOME.SomeLanguageCore.Parser;

namespace SOME.SomeLanguageGenerator
{
    public class CSharpGenerator : MSCodeGenerator
    {
        public struct Keywords
        {
            public const string Class = "class";
            public const string Interface = "interface";
            public const string Struct = "struct";
            public const string Private = "private";
            public const string Public = "public";
            public const string Protected = "protected";
            public const string Static = "static";
            public const string Abstract = "abstract";
            public const string Virtual = "virtual";
            public const string Override = "override";
            public const string Const = "const";
            public const string New = "new";
            public const string Get = "get";
            public const string Set = "set";
            public const string Return = "return";
            public const string Value = "value";
            public const string Void = "void";
        }

        public override CodeDomProvider GetCodeDomProvider()
        {
            return new CSharpCodeProvider();
        }

        public override string GetSource()
        {
            string source = base.GetSource();

            //obsolete
            StringBuilder sb = new StringBuilder();
            foreach (SomeClass cls in m_codeDom.Classes)
            {
                sb.Append(GetClass(cls));
                sb.Append(Environment.NewLine);
            }

            string source1 = sb.ToString();
            return string.Format("============Generated By CodeDom:============= {0}{1}{2}=============Generated By SomeDom:============={3}{4}", Environment.NewLine, source, Environment.NewLine, Environment.NewLine, source1);
        }

        public override string GetClass(SomeClass cls)
        {
            SomeStringBuilder sb = new SomeStringBuilder(0);
            if (cls.ClsType == SomeClass.ClassType.Abstract)
            {
                sb.Append(Keywords.Abstract).Append(" ");
                sb.Append(Keywords.Class);
            }
            else if (cls.ClsType == SomeClass.ClassType.Interface)
            {
                sb.Append(Keywords.Interface);
            }
            else if (cls.ClsType == SomeClass.ClassType.Struct)
            {
                sb.Append(Keywords.Struct);
            }
            else
            {
                sb.Append(Keywords.Class);
            }

            sb.Append(" ").Append(cls.ClassName);
            if (cls.Parents != null)
            {
                sb.Append(":");
                foreach (string parent in cls.Parents)
                {
                    sb.Append(parent).Append(",");
                }
                sb.Remove(sb.Length - 1, 1);
            }
            sb.AppendCurlyBegin();

            bool bNewLine = false;

            //fields
            if (cls.Fields != null)
            {
                bNewLine = true;
                for (int i = 0; i < cls.Fields.Count; i++)
                {
                    sb.Append(GetField(cls.Fields[i]));
                    if (i < cls.Fields.Count - 1)
                    {
                        sb.AppendLine();
                    }
                }
            }

            //properties
            if (cls.Properties != null)
            {
                if (bNewLine)
                {
                    sb.AppendLine();
                }

                bNewLine = true;
                for (int i = 0; i < cls.Properties.Count; i++)
                {
                    sb.Append(GetPropery(cls.Properties[i]));
                    if (i < cls.Properties.Count - 1)
                    {
                        sb.AppendLine();
                    }
                }
            }

            //methods
            if (cls.Methods != null)
            {
                if (bNewLine)
                {
                    sb.AppendLine();
                }

                for (int i = 0; i < cls.Methods.Count; i++)
                {
                    sb.Append(GetMethod(cls.Methods[i]));
                    if (i < cls.Methods.Count - 1)
                    {
                        sb.AppendLine();
                    }
                }
            }
            sb.AppendCurlyClose();
            return sb.ToString();
        }

        public override string GetField(SomeField field)
        {
            SomeStringBuilder sb = new SomeStringBuilder(1);

            //sb.AppendLine();
            sb.Append(GetDeclareString(field));

            //initialize?
            if (field.IsInitialized)
            {
                sb.Append(" = ").Append(Keywords.New).Append(" ").Append(field.InitialCreationType == string.Empty ? field.Type : field.InitialCreationType).Append("(").Append(field.InitialCreationParaString).Append(")");
            }

            sb.Append(";");

            sb.AppendLine();
            return sb.ToString();
        }

        public override string GetPropery(SomeProperty property)
        {
            SomeStringBuilder sb = new SomeStringBuilder(1);
            sb.Append(GetDeclareString(property));
            sb.AppendCurlyBegin();

            if (property.IsGettable)
            {
                sb.Append(Keywords.Get);
                sb.AppendCurlyBegin();
                sb.Append(Keywords.Return).Append(" ").Append(property.AccFieldName).Append(";");
                sb.AppendCurlyClose();
            }
            
            if (property.IsSettable)
            {
                sb.Append(Keywords.Set);
                sb.AppendCurlyBegin();
                sb.Append(property.AccFieldName).Append(" = ").Append(Keywords.Value).Append(";");
                sb.AppendCurlyClose();
            }

            sb.AppendCurlyClose();
            return sb.ToString();
        }

        public override string GetMethod(SomeMethod method)
        {
            SomeStringBuilder sb = new SomeStringBuilder(1);
            
            //destructor ?
            if (!method.IsDestructor)
            {
                sb.Append(GetDeclareString(method));
            }
            else
            {
                sb.Append(method.Name);
            }

            sb.Append("(");
            if (method.Parameters != null)
            {
                foreach (SomeParameter para in method.Parameters)
                {
                    sb.Append(para.Type);
                    sb.Append(" ");
                    sb.Append(para.PassedObj == string.Empty ? "some" + SomeParser.MakeFirstUpper(para.Type) : para.PassedObj);
                    sb.Append(",");
                }
                sb.Replace(",", "", sb.Length - 1,1);
            }
            sb.Append(")");

            //abstract
            if (!method.IsAbstract)
            {
                sb.AppendCurlyBegin();
                if (method.Statements != null)
                {
                    for (int i = 0; i < method.Statements.Count; i++)
                    {
                        sb.Append(GetStatement(method.Statements[i]));
                        if (i < method.Statements.Count - 1)
                        {
                            sb.AppendLine();
                        }
                    }
                }
                sb.AppendCurlyClose();
            }
            else
            {
                sb.Append(";");
                sb.AppendLine();
            }

            return sb.ToString();
        }

        private string GetStatement(SomeStatement statement)
        {
            StringBuilder sb = new StringBuilder();
            switch (statement.StatmentType)
            {
                case SomeStatementType.Comment:
                    {
                        sb.Append((statement as SomeStatementComment).Comment);
                    } break;
                case SomeStatementType.Snippet:
                    {
                        sb.Append((statement as SomeStatementSnippet).Snippet);
                    } break;
                case SomeStatementType.Creation:
                    {
                        SomeStatementCreation creation = statement as SomeStatementCreation;
                        switch (creation.CreationType)
                        {
                            case SomeStatementCreation.SomeStatementCreationType.Defination:
                                {
                                    //CType obj;
                                    sb.Append(creation.Defination.DefinationType).Append(" ");
                                    sb.Append(creation.Defination.DefinationObject);
                                } break;
                            case SomeStatementCreation.SomeStatementCreationType.Construction:
                                {
                                    //obj = new CType(...);
                                    sb.Append(creation.Construction.ConstructionObject).Append(" = new ");
                                    sb.Append(!string.IsNullOrEmpty(creation.Construction.ConstructionObjectRealType) ? creation.Construction.ConstructionObjectRealType : creation.Construction.ConstructionObjectType);
                                    sb.Append("(");
                                    if (creation.Construction.ConstructorParameters != null)
                                    {
                                        foreach (SomeParameter para in creation.Construction.ConstructorParameters)
                                        {
                                            sb.Append(para.InvokingObj).Append(",");
                                        }
                                        sb.Remove(sb.Length - 1, 1);
                                    }
                                    sb.Append(")");
                                } break;
                            case SomeStatementCreation.SomeStatementCreationType.DefinationWithConstruction:
                                {
                                    //CType obj = new CRealType(...);
                                    sb.Append(creation.Defination.DefinationType).Append(" ");
                                    sb.Append(creation.Construction.ConstructionObject).Append(" = new ");
                                    sb.Append(!string.IsNullOrEmpty(creation.Construction.ConstructionObjectRealType) ? creation.Construction.ConstructionObjectRealType : creation.Construction.ConstructionObjectType);
                                    sb.Append("(");
                                    if (creation.Construction.ConstructorParameters != null)
                                    {
                                        foreach (SomeParameter para in creation.Construction.ConstructorParameters)
                                        {
                                            sb.Append(para.InvokingObj).Append(",");
                                        }
                                        sb.Remove(sb.Length - 1, 1);
                                    }
                                    sb.Append(")");
                                } break;
                            default:
                                {
                                    Debug.Assert(false, "should not be here!");
                                } break;
                        }
                    } break;
                case SomeStatementType.Invoking:
                    {
                        SomeStatementMethodInvoking invoking = statement as SomeStatementMethodInvoking;
                        sb.Append(GetStatementMethodInvoking(invoking));
                    } break;
                case SomeStatementType.Assignment:
                    {
                        SomeStatementAssignment assign = statement as SomeStatementAssignment;
                        switch (assign.AssignmentType)
                        {
                            case SomeStatementAssignment.SomeStatementAssignmentType.LeftObjEqualsRightObj:
                                {
                                    //obj1 = obj2;
                                    sb.Append(assign.LeftObject.Object);
                                    if(!string.IsNullOrEmpty(assign.LeftObject.ObjectOfObject))
                                    {
                                        sb.Append(".").Append(assign.LeftObject.ObjectOfObject);
                                    }
                                    sb.Append(" = ");
                                    sb.Append(assign.RightObject.Object);
                                    if (!string.IsNullOrEmpty(assign.RightObject.ObjectOfObject))
                                    {
                                        sb.Append(".").Append(assign.RightObject.ObjectOfObject);
                                    }
                                } break;
                            case SomeStatementAssignment.SomeStatementAssignmentType.LeftDefEqualsRightObj:
                                {
                                    //CType obj = obj2;
                                    sb.Append(assign.LeftDefination.DefinationType).Append(" ").Append(assign.LeftDefination.DefinationObject);
                                    sb.Append(" = ");
                                    sb.Append(assign.RightObject.Object);
                                    if (!string.IsNullOrEmpty(assign.RightObject.ObjectOfObject))
                                    {
                                        sb.Append(".").Append(assign.RightObject.ObjectOfObject);
                                    }
                                } break;
                            case SomeStatementAssignment.SomeStatementAssignmentType.LeftObjEqualsRightInvoking:
                                {
                                    //obj1 = [method invoking]
                                    sb.Append(assign.LeftObject.Object);
                                    if (!string.IsNullOrEmpty(assign.LeftObject.ObjectOfObject))
                                    {
                                        sb.Append(".").Append(assign.LeftObject.ObjectOfObject);
                                    }
                                    sb.Append(" = ");
                                    sb.Append(GetStatement(assign.RightMethodInvoking));
                                } break;
                            case SomeStatementAssignment.SomeStatementAssignmentType.LeftDefEqualsRightInvoking:
                                {
                                    //CType obj = [method invoking]
                                    sb.Append(assign.LeftDefination.DefinationType).Append(" ").Append(assign.LeftDefination.DefinationObject);
                                    sb.Append(" = ");
                                    sb.Append(GetStatement(assign.RightMethodInvoking));
                                } break;
                            default:
                                {
                                    Debug.Assert(false, "should not be here!");
                                } break;
                        }
                    } break;
                case SomeStatementType.Return:
                    {
                        SomeStatementReturn ret = statement as SomeStatementReturn;
                        sb.Append("return ");
                        switch (ret.ReturnType)
                        {
                            case SomeStatementReturn.SomeStatementReturnType.ReturnConstant:
                                {
                                    sb.Append(ret.ReturnConstantObject);
                                } break;
                            case SomeStatementReturn.SomeStatementReturnType.ReturnObject:
                                {
                                    sb.Append(ret.ReturnObject.Object);
                                    if (!string.IsNullOrEmpty(ret.ReturnObject.ObjectOfObject))
                                    {
                                        sb.Append(".").Append(ret.ReturnObject.ObjectOfObject);
                                    }
                                } break;
                            case SomeStatementReturn.SomeStatementReturnType.ReturnConstrution:
                                {
                                    sb.Append(" new ");
                                    sb.Append(ret.ConstructionType);
                                    sb.Append("(");
                                    if (ret.Parameters != null)
                                    {
                                        foreach (SomeParameter para in ret.Parameters)
                                        {
                                            sb.Append(para.InvokingObj).Append(",");
                                        }
                                        sb.Remove(sb.Length - 1, 1);
                                    }
                                    sb.Append(")");
                                } break;
                            default:
                                {
                                    Debug.Assert(false, "should not be here!");
                                } break;
                        }
                    } break;
                default:
                    {
                        Debug.Assert(false,"should not be here!");
                    } break;
            }
            if (statement.StatmentType != SomeStatementType.Comment && statement.StatmentType != SomeStatementType.Snippet)
            {
                if (!sb.ToString().EndsWith(";"))
                {
                    sb.Append(";");
                }
            }
            return sb.ToString();
        }

        private string GetStatementMethodInvoking(SomeStatementMethodInvoking invoking)
        {
            StringBuilder sb = new StringBuilder();
            switch (invoking.InvokingType)
            {
                case SomeStatementMethodInvoking.SomeStatementMethodInvokingType.PrivateInvoking:
                    {
                        sb.Append(invoking.MethodName);
                        sb.Append("(");
                        if (invoking.Parameters != null)
                        {
                            foreach (SomeParameter para in invoking.Parameters)
                            {
                                sb.Append(para.InvokingObj).Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                        }
                        sb.Append(")");
                    } break;
                case SomeStatementMethodInvoking.SomeStatementMethodInvokingType.InstanceInvoking:
                    {
                        sb.Append(invoking.InvokingObject).Append(".");
                        sb.Append(invoking.MethodName);
                        sb.Append("(");
                        if (invoking.Parameters != null)
                        {
                            foreach (SomeParameter para in invoking.Parameters)
                            {
                                sb.Append(para.InvokingObj).Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                        }
                        sb.Append(")");
                    } break;
                case SomeStatementMethodInvoking.SomeStatementMethodInvokingType.StaticInvoking:
                    {
                        sb.Append(invoking.MethodType).Append(".");
                        sb.Append(invoking.MethodName);
                        sb.Append("(");
                        if (invoking.Parameters != null)
                        {
                            foreach (SomeParameter para in invoking.Parameters)
                            {
                                sb.Append(para.InvokingObj).Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                        }
                        sb.Append(")");
                    } break;
                default:
                    {
                        Debug.Assert(false, "should not be here!");
                    } break;
            }
            return sb.ToString();
        }

        private string GetDeclareString(SomeTreeNodeMemberBase member)
        {
            StringBuilder sb = new StringBuilder();
            
            //accessibility level
            sb.Append(SomeParser.MakeFirstLower(member.AccLevel.ToString())).Append(" ");

            //static?override?virtual?abstract?
            if (member.IsStatic)
            {
                sb.Append(Keywords.Static).Append(" ");
            }
            else if(member.IsOverride)
            {
                sb.Append(Keywords.Override).Append(" ");
            }
            else if (member.IsVirtual)
            {
                sb.Append(Keywords.Virtual).Append(" ");
            }
            else if (member.IsAbstract)
            {
                sb.Append(Keywords.Abstract).Append(" ");
            }

            //const
            if (member.IsConst)
            {
                sb.Append(Keywords.Const).Append(" ");
            }

            //type
            if (member.Type == string.Empty)
            {
                if (member is SomeMethod && !((member as SomeMethod).IsConstructor))
                {
                    sb.Append(Keywords.Void);
                    sb.Append(" ");
                }
            }
            else
            {
                sb.Append(member.Type);
                sb.Append(" ");
            }

            //name
            sb.Append(member.Name == "main" ? "Main" : member.Name);
            return sb.ToString();
        }


        public CSharpGenerator(SomeDom codeDom): base(codeDom)
        {
        }

        public override string GetSourceName()
        {
            return "C#";
        }

        public override string GetSourceNameForTextEditorControl()
        {
            return "C#";
        }

        public override string GetSourceFileExtension()
        {
            return ".cs";
        }

        public override string[] GetLangugeTemplate()
        {
            return new string[] {"ClassLibrary.zip", "CSharp"};
        }
    }
}
